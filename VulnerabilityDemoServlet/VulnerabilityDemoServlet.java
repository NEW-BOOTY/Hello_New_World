/** Copyright Â© 2024 Devin B. Royal. All rights reserved. */
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Logger;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;

@WebServlet("/vulnerabilities")
public class VulnerabilityDemoServlet extends HttpServlet {
  private static final Logger logger = Logger.getLogger(VulnerabilityDemoServlet.class.getName());
  private static DataSource dataSource;

  @Override
  public void init() throws ServletException {
    try {
      // Get the DataSource from the application server (e.g., Apache Tomcat)
      dataSource = (DataSource) new InitialContext().lookup("java:/comp/env/jdbc/testdb");
    } catch (NamingException e) {
      logger.severe("Error initializing DataSource: " + e.getMessage());
      throw new ServletException("Error initializing DataSource", e);
    }
  }

  @Override
  protected void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
    response.setContentType("text/html");
    PrintWriter out = response.getWriter();

    // Retrieve parameters
    String username = request.getParameter("username");
    String xssInput = request.getParameter("xssInput");
    String fileId = request.getParameter("fileId");

    // Output HTML structure
    out.println("<html><head><title>Vulnerability Demo</title></head><body>");
    out.println("<h1>Vulnerability Demonstrations</h1>");

    // SQL Injection Section
    out.println("<h2>SQL Injection Demo</h2>");
    if (username != null && !username.isEmpty()) {
      try (Connection connection = dataSource.getConnection()) {
        // Prevent SQL Injection using PreparedStatement
        String query = "SELECT * FROM users WHERE username = ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
          stmt.setString(1, username);
          ResultSet resultSet = stmt.executeQuery();
          while (resultSet.next()) {
            out.println("<p>User found: " + resultSet.getString("username") + "</p>");
          }
        }
      } catch (SQLException e) {
        out.println("<p>Error: " + e.getMessage() + "</p>");
        logger.severe("SQL Error: " + e.getMessage());
      }
    }

    // XSS Section - Escape user input to prevent XSS attacks
    out.println("<h2>Cross-Site Scripting (XSS) Demo</h2>");
    out.println("<p>Your input: " + escapeHtml(xssInput != null ? xssInput : "none") + "</p>");

    // IDOR Section - Implement file access control
    out.println("<h2>Insecure Direct Object References (IDOR) Demo</h2>");
    if (fileId != null && !fileId.isEmpty()) {
      if (hasAccessToFile(fileId)) {
        String filePath = "/files/" + fileId;
        out.println("<p>Accessing file: " + filePath + "</p>");
      } else {
        out.println("<p>Access denied to file: " + fileId + "</p>");
        logger.warning("Unauthorized access attempt to file: " + fileId);
      }
    }

    out.println("</body></html>");
  }

  /**
   * Escapes HTML special characters to prevent XSS.
   *
   * @param input The user input.
   * @return The escaped HTML string.
   */
  private String escapeHtml(String input) {
    if (input == null) return "";
    return input
        .replace("&", "&amp;")
        .replace("<", "&lt;")
        .replace(">", "&gt;")
        .replace("\"", "&quot;")
        .replace("'", "&#x27;");
  }

  /**
   * Checks if the current user has access to the specified file. This is a simple placeholder for
   * access control, which can be extended.
   *
   * @param fileId The file ID to check.
   * @return true if access is allowed, false otherwise.
   */
  private boolean hasAccessToFile(String fileId) {
    // Example access control: only allow access to files with IDs in the range 1-100.
    try {
      int id = Integer.parseInt(fileId);
      return id >= 1 && id <= 100; // Implement your access control logic here
    } catch (NumberFormatException e) {
      return false;
    }
  }
}
